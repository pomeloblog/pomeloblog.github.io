<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AOP编程和反射实例</title>
    <url>/2024/07/28/AOP%E7%BC%96%E7%A8%8B%E5%92%8C%E5%8F%8D%E5%B0%84%E5%AE%9E%E4%BE%8B/</url>
    <content><![CDATA[<h1 id="AOP编程和反射实例"><a href="#AOP编程和反射实例" class="headerlink" title="AOP编程和反射实例"></a>AOP编程和反射实例</h1><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>利用AOP编程实现对数据库数据添加或更新时部分字段的自动赋值功能</p>
<ul>
<li>自定义注解AutoFill，用于标识需要部分字段自动填充的方法</li>
<li>自定义切面类AutoFillAspect，统一拦截加入了AutoFill注解的方法，通过反射为部分字段赋值</li>
</ul>
<h2 id="已有类"><a href="#已有类" class="headerlink" title="已有类"></a>已有类</h2><h3 id="Result—pojo"><a href="#Result—pojo" class="headerlink" title="Result—pojo"></a>Result—pojo</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span> &#123;</span><br><span class="line">    Integer code;</span><br><span class="line">    String message;</span><br><span class="line">    Object object;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">success</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">1</span>,<span class="string">&quot;success&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="User—pojo"><a href="#User—pojo" class="headerlink" title="User—pojo"></a>User—pojo</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    String password;</span><br><span class="line">    String role;</span><br><span class="line">    LocalDateTime createTime;</span><br><span class="line">    LocalDateTime updateTime;</span><br><span class="line">    String updateRole;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="UserController—controller"><a href="#UserController—controller" class="headerlink" title="UserController—controller"></a>UserController—controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/user/insert&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">insert</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        userService.insert(user);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/user/update&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        userService.update(user);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="UserServiceImpl—service"><a href="#UserServiceImpl—service" class="headerlink" title="UserServiceImpl—service"></a>UserServiceImpl—service</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        userMapper.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        userMapper.update(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="UserMapper—mapper"><a href="#UserMapper—mapper" class="headerlink" title="UserMapper—mapper"></a>UserMapper—mapper</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AutoFill(value = OperationType.INSERT)</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into user (name, password, role,create_time, update_time, update_role)\n&quot; +</span></span><br><span class="line"><span class="meta">            &quot;values(#&#123;name&#125;,#&#123;password&#125;,#&#123;role&#125;,#&#123;createTime&#125;,#&#123;updateTime&#125;,#&#123;updateRole&#125;);&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AutoFill(value = OperationType.UPDATE)</span></span><br><span class="line">    <span class="meta">@Update(&quot;UPDATE user\n&quot; +</span></span><br><span class="line"><span class="meta">            &quot;SET update_time = #&#123;updateTime&#125;,\n&quot; +</span></span><br><span class="line"><span class="meta">            &quot;    update_role = #&#123;updateRole&#125;\n&quot; +</span></span><br><span class="line"><span class="meta">            &quot;WHERE id = #&#123;id&#125;;&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(User user)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="自定义枚举类"><a href="#自定义枚举类" class="headerlink" title="自定义枚举类"></a>自定义枚举类</h3><p>枚举类中存放了要用到的方法标识</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">OperationType</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    INSERT,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    UPDATE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自定义注释"><a href="#自定义注释" class="headerlink" title="自定义注释"></a>自定义注释</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span><span class="comment">// 设置该注解应用到方法上</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AutoFill &#123;</span><br><span class="line">    OperationType <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="定义切面"><a href="#定义切面" class="headerlink" title="定义切面"></a>定义切面</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AutoFillAspect</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义切入点</span></span><br><span class="line"><span class="comment">     * execution(* com.example.demo.mapper.*.*(..))</span></span><br><span class="line"><span class="comment">     * 设置要扫描的包是mapper下的所有</span></span><br><span class="line"><span class="comment">     * annotation(com.example.demo.annotation.AutoFill)</span></span><br><span class="line"><span class="comment">     * 设置只有当使用AutoFill注解的时候才启用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.example.demo.mapper.*.*(..)) &amp;&amp; @annotation(com.example.demo.annotation.AutoFill)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">autoFillPointcut</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前置通知</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before(&quot;autoFillPointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">autoFill</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.获取被拦截方法的注解类型</span></span><br><span class="line">        <span class="type">MethodSignature</span> <span class="variable">signature</span> <span class="operator">=</span> (MethodSignature) joinPoint.getSignature();<span class="comment">// 获取方法签名</span></span><br><span class="line">        <span class="type">AutoFill</span> <span class="variable">autoFill</span> <span class="operator">=</span> signature.getMethod().getAnnotation(AutoFill.class);<span class="comment">// 获取方法上的注解对象</span></span><br><span class="line">        <span class="type">OperationType</span> <span class="variable">operationType</span> <span class="operator">=</span> autoFill.value();<span class="comment">// 获取注解的值</span></span><br><span class="line">        <span class="comment">// 2.获取被拦截方法的参数(约定添加注释的方法要赋值的参数为第一个参数)</span></span><br><span class="line">        Object[] args = joinPoint.getArgs();<span class="comment">// 获取方法参数集合</span></span><br><span class="line">        <span class="keyword">if</span> (args == <span class="literal">null</span> || args.length == <span class="number">0</span>) &#123;<span class="comment">// 防止空指针报错</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">entity</span> <span class="operator">=</span> args[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">// 3.准备要赋值的数据</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        <span class="type">String</span> <span class="variable">role</span> <span class="operator">=</span> <span class="string">&quot;用户&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">updateRole</span> <span class="operator">=</span> <span class="string">&quot;管理员&quot;</span>;</span><br><span class="line">        <span class="comment">// 4.根据注解值的类型利用反射进行相应的赋值操作</span></span><br><span class="line">        <span class="keyword">if</span> (operationType == OperationType.INSERT)&#123;</span><br><span class="line">            <span class="comment">// 为四个字段进行赋值</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 获取字段的setter</span></span><br><span class="line">                <span class="type">Method</span> <span class="variable">setRole</span> <span class="operator">=</span> entity.getClass().getDeclaredMethod(<span class="string">&quot;setRole&quot;</span>, String.class);</span><br><span class="line">                <span class="type">Method</span> <span class="variable">setCreateTime</span> <span class="operator">=</span> entity.getClass().getDeclaredMethod(<span class="string">&quot;setCreateTime&quot;</span>, LocalDateTime.class);</span><br><span class="line">                <span class="type">Method</span> <span class="variable">setUpdateTime</span> <span class="operator">=</span> entity.getClass().getDeclaredMethod(<span class="string">&quot;setUpdateTime&quot;</span>, LocalDateTime.class);</span><br><span class="line">                <span class="type">Method</span> <span class="variable">setUpdateRole</span> <span class="operator">=</span> entity.getClass().getDeclaredMethod(<span class="string">&quot;setUpdateRole&quot;</span>, String.class);</span><br><span class="line">                <span class="comment">// 通过反射进行赋值</span></span><br><span class="line">                setRole.invoke(entity,role);</span><br><span class="line">                setCreateTime.invoke(entity,now);</span><br><span class="line">                setUpdateTime.invoke(entity,now);</span><br><span class="line">                setUpdateRole.invoke(entity,updateRole);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (operationType == OperationType.UPDATE)&#123;</span><br><span class="line">            <span class="comment">// 为两个字段赋值</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 获取字段的setter</span></span><br><span class="line">                <span class="type">Method</span> <span class="variable">setUpdateTime</span> <span class="operator">=</span> entity.getClass().getDeclaredMethod(<span class="string">&quot;setUpdateTime&quot;</span>, LocalDateTime.class);</span><br><span class="line">                <span class="type">Method</span> <span class="variable">setUpdateRole</span> <span class="operator">=</span> entity.getClass().getDeclaredMethod(<span class="string">&quot;setUpdateRole&quot;</span>, String.class);</span><br><span class="line">                <span class="comment">// 通过反射进行赋值</span></span><br><span class="line">                setUpdateTime.invoke(entity,now);</span><br><span class="line">                setUpdateRole.invoke(entity,updateRole);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>未被拦截时:<br><img src="/2024/07/28/AOP%E7%BC%96%E7%A8%8B%E5%92%8C%E5%8F%8D%E5%B0%84%E5%AE%9E%E4%BE%8B/user01.png"><br>拦截后:<br><img src="/2024/07/28/AOP%E7%BC%96%E7%A8%8B%E5%92%8C%E5%8F%8D%E5%B0%84%E5%AE%9E%E4%BE%8B/user02.png"></p>
]]></content>
  </entry>
  <entry>
    <title>如何快速搭建个人博客</title>
    <url>/2024/07/22/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天，自己的博客也是正式上线了，虽然还有些简陋，不过我也会在后续慢慢美化。早在我在大二第一学期的时候就萌生了搭建自己博客的想法，由于一些原因，也是迟迟没有行动。前几天不知从哪里看到一则招聘信息，其中有一点要求有自己的技术博客，提醒了我一下。正好这几天事情比较少，可以静下来好好研究一下。</p>
<p>搭建一个自己的博客，每天分享一下自己学到的编程技巧，记录一下自己的学习轨迹，还能练习markdown书写的语法，等找工作到投简历的时候可以在简历上多加一条:精通markdown文档的书写（bushi</p>
<p>言归正传，下面就来分享一下自己建站都要做些什么，本教程采取 hexo 框架 butterfly 主题 github pages进行部署。</p>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="编程工具"><a href="#编程工具" class="headerlink" title="编程工具"></a>编程工具</h2><h3 id="Vscode-Visual-Studio-Code"><a href="#Vscode-Visual-Studio-Code" class="headerlink" title="Vscode(Visual Studio Code)"></a>Vscode(Visual Studio Code)</h3><p>首先你要有一个代码编辑器，用于后续框架的配置修改。可以用webstorm或者vscode，这里我使用的是vscode。</p>
<p>安装十分简单，从<a href="https://code.visualstudio.com/">vscode官网</a>上就可以下载到安装包，之后正常安装就可以了。<br><img src="/2024/07/22/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/vscode.png"><br>vscode插件商店有着丰富的插件供你选择，这里我推荐一个markdown预览插件Markdown Preview Enhanced，这个插件可以让你在编写markdown文档的时候实现实时预览。</p>
<h2 id="代码托管平台"><a href="#代码托管平台" class="headerlink" title="代码托管平台"></a>代码托管平台</h2><h3 id="GIthub"><a href="#GIthub" class="headerlink" title="GIthub"></a>GIthub</h3><p>github 是一个代码托管平台。最简单的理解就是把 github 当作一个云盘，只不过云盘里要上传的东西是你自己的代码，虽然这样表述有些不妥，但对于初学者来说再合适不过了。<br>首先我们要注册一个github账号，具体方式可以查看<a href="https://blog.csdn.net/sevenpens/article/details/129118026">这里</a>。<br>然后创建一个仓库，推荐可见性设置为 private，具体方式可以参考<a href="https://blog.csdn.net/u012693479/article/details/114892130">这里</a>。这个仓库就用来存放博客的代码，以后你本地的博客代码都可以通过 git 上传到这个仓库当作备份。</p>
<h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><blockquote>
<p>git 是一个分布式版本控制软件，最初由林纳斯·托瓦兹创作，于2005年以GPL许可协议发布。</p>
</blockquote>
<p>这是维基百科上给出的介绍，通俗来讲，git 是一个版本控制软件，可以记录你代码的每一次修改，并且可以回滚到之前的版本。我并不打算深入讲解怎么使用git，这里只介绍如何安装 git，以及在搭建博客的过程中会用到的一些git命令，如果对 git 感兴趣可以查看 git 的<a href="https://git-scm.com/book/zh/v2">官方文档</a>。</p>
<p>进入git的<a href="https://git-scm.com/">官网</a>，点击Download for Windows后会跳转到有多种下载方式的二级页面，选择其中一种下载方式即可。<br><img src="/2024/07/22/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/git01.png"><br>下载完成后，打开安装包，一路next即可。git安装默认是在C盘，若你想安装到其他盘上，修改安装路径即可，记得不要用中文路径。<br>安装完成后，在桌面右键鼠标可以发现多了两个选项，这两个选项就是git 的操作页面。一般情况下我都是使用 git 的命令行来操作 git 的，也就是第二个的 git bash。当然如果你喜欢 git 的图形化界面，你也可以使用第一个选项。<br><img src="/2024/07/22/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/git02.png"><br>点击Open Git Bash here便是git的命令行界面，使用git -v命令可以查看当前你安装的git版本。<br><img src="/2024/07/22/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/git03.png"><br>接下来要对git进行配置，这一步是必须要做的，目的是让 git 知道你的用户名和邮箱，这样在使用 git 提交代码的时候就会自动添加用户名和邮箱。<br>在刚刚打开的git bash中输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;你的用户名&quot;</span></span><br><span class="line">$ git config --global user.email 你的邮箱</span><br><span class="line">示例:</span><br><span class="line">$ git config --global user.name <span class="string">&quot;John Doe&quot;</span></span><br><span class="line">$ git config --global user.email johndoe@example.com</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意，如果使用了 <code>--global</code> 选项，那么该命令只需要运行一次，因为之后无论你在该系统上做任何事情， git 都会使用那些信息。 当你想针对特定项目使用不同的用户名称与邮件地址时，可以在那个项目目录下运行没有 <code>--global</code> 选项的命令来配置。</p>
</blockquote>
<p>如果你想通过windows自带的 cmd 或者 powershell 来使用 git，你需要配置环境变量，将 git 的 bin 目录添加到环境变量中。具体方法可参考<a href="https://blog.csdn.net/weixin_45811256/article/details/130925392">这里</a>。</p>
<h3 id="Node-js-和-npm"><a href="#Node-js-和-npm" class="headerlink" title="Node.js 和 npm"></a>Node.js 和 npm</h3><p>之所以安装 node 是因为我们搭建博客所使用的框架需要用到 node 环境<br>进入node的<a href="https://nodejs.org/zh-cn">官网</a>，点击下载（LTS是长期支持的版本），然后也是一路next<br><img src="/2024/07/22/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/node01.png"><br>安装完成后，在Windows环境下，打开 cmd，然后输入<code>node -v</code>，如果安装正常，你应该看到 node 版本号的输出。<br>npm 是什么玩意？其实 npm 是 Node.js 的包管理工具（package manager），也就是用于安装依赖的工具。<br>npm 在安装 Node.js 的时候顺带装好了，我们只需要在 cmd 中输入<code>npm -v</code>，如果安装正常，你应该看到 npm 版本号的输出。<br><img src="/2024/07/22/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/node02.png"></p>
<h2 id="安装框架"><a href="#安装框架" class="headerlink" title="安装框架"></a>安装框架</h2><h3 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h3><p>做完以上的步骤，我们就把框架所需要的工具和环境准备好了，现在需要的就是安装一个框架。框架可以把你写的 markdown 文件一键转换成静态页面，你所需要做的仅仅是 markdown 文档的编写以及 hexo 相关命令的调用，大大简化了搭建博客的过程。通过安装 hexo 的插件，甚至可以实现一键部署到github pages，十分方便。<br>我这里使用的是 <a href="https://hexo.io/zh-cn/index.html">hexo</a>，hexo 是一个快速、简洁且高效的博客框架。<br>首先在 cmd 中使用 npm 包管理器全局安装 hexo:</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，使用 npm 安装 hexo 的时候，你可能会遇到如下报错（如果没有可以直接跳过此处）:</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm http GET https://registry.npmjs.org/yo</span><br><span class="line">npm ERR! network read ECONNRESET</span><br><span class="line">npm ERR! network This is most likely <span class="keyword">not</span> a problem with npm itself</span><br><span class="line">npm ERR! network and is related to network connectivity.</span><br><span class="line">npm ERR! network <span class="keyword">In</span> most cases you are behind a proxy or have bad network settings.</span><br><span class="line">npm ERR! network</span><br><span class="line">npm ERR! network <span class="keyword">If</span> you are behind a proxy, please make sure that the</span><br><span class="line">npm ERR! network &#x27;proxy&#x27; config is <span class="built_in">set</span> properly.  See: &#x27;npm <span class="built_in">help</span> config&#x27;</span><br></pre></td></tr></table></figure>
<p>不要担心，这是由于网络原因造成的报错，你可以为 npm 配置国内镜像源来解决这一问题<br>同样的，在 cmd 中输入:</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://mirrors.huaweicloud.com/repository/npm/</span><br></pre></td></tr></table></figure>
<p>然后再次在 cmd 中输入:</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></table></figure>
<p>你将会看到控制台上输出了你刚才设置的网址<br>这个镜像是国内华为的，当然，你也可以设置其他的，具体网址网上可以搜到<br>安装完成后，就可以进行博客项目的初始化了<br>新建一个文件夹用于存放你要写的博客，然后在该文件夹中打开 cmd，输入:<br><code>$ hexo init</code><br>这条命令会从 hexo 官方仓库中克隆一些基础项目文件到你新建的文件夹中，文件夹中会多这些文件<br><img src="/2024/07/22/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hexo01.png"><br>接下来安装项目所需的相关依赖，在 cmd 中输入:<br><code> $ npm install</code><br>安装完成之后你会看到类似如下输出:<br><img src="/2024/07/22/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hexo02.png"><br>这里简单介绍一下各个文件或者文件夹的作用:</p>
</blockquote>
<ul>
<li>scaffolds: 这是你博客的模板文件夹，你可以在这里编写模板文件</li>
<li>source: 这是你博客的源码文件夹<ul>
<li>_draft: 这是你博客的草稿文件夹，你可以在这里编写 markdown 草稿</li>
<li>_posts: 这是你博客的博客文件夹，你可以在这里编写 markdown 文档，这里存放的都是你要发布到博客网站上的文档</li>
</ul>
</li>
<li>public: 执行<code>hexo generate</code>后生成的编译结果文件夹，你可以在这里查看你的博客</li>
<li>themes: 这是你博客的主题文件夹，你可以把喜欢的主题放到这个文件夹中</li>
<li>_config.yml: 这是你博客的配置文件，你可以在这里配置你的博客名称、主题、标签、分类、作者、邮箱、GitHub 链接等</li>
<li>在这些文件或文件夹中除了配置要用到 _config.yml 文件外，用到最多的就是 _post 文件夹了。<br>刚刚使用<code>npm init</code>初始化后会有一个 hexo 官方提供的博客样例，我们可以通过在 cmd 中输入:<br><code>$ npm server</code><br>来开启本地服务器，你想会看到如下输出:<br><img src="/2024/07/22/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hexo03.png"><br>访问控制台输出的网站即可查看样例博客<br><img src="/2024/07/22/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hexo04.png"><br>在 cmd 控制台中使用<code>ctrl + c</code>来关闭服务器<br>到此，你已经完成了搭建工作的一半，接下来我们就来进行另一半搭建工作。</li>
</ul>
<h1 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h1><p>虽然 hexo 的官方给我们提供了默认的主题，但既然是个人博客那一定要突出个人独特的风格，正好，我们可以通过应用不同的 hexo 主题来达到这个目的。</p>
<h2 id="butterfly"><a href="#butterfly" class="headerlink" title="butterfly"></a>butterfly</h2><p>本教程中使用 butterfly 主题，以下配置仅针对butterfly 主题。若你想应用其他主题可以在 github 上搜索<code>hexo theme</code>,相关主题配置可以参考官方文档。</p>
<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>先来看一下 butterfly 主题的样子<br><img src="/2024/07/22/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/butterfly01.png"><br><img src="/2024/07/22/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/butterfly02.png"></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>安装butterfly 主题有多种方法，我推荐使用git clone 的方式.<br>在你的博客文件夹中打开 cmd 输入:</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure>
<p>这个命令会自动把butterfly 主题所需的相关文件从 butterfly 官方仓库克隆到 themes 文件夹中</p>
<h3 id="应用主题"><a href="#应用主题" class="headerlink" title="应用主题"></a>应用主题</h3><p>修改 hexo 根目录下的 _config.yml 文件，将主题名称修改为 butterfly</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">landscape</span> <span class="string">--&gt;</span> <span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure>
<h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>hexo 默认是没有 pug 以及 stylus 的渲染器，所以要先安装hexo-renderer-pug 和 hexo-renderer-stylus两个插件<br>在博客文件夹中打开 cmd 输入:</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure>
<p>安装完成后运行运行<code>hexo server</code>命令，访问网站即可看到效果<br><img src="/2024/07/22/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/butterfly03.png"><br><img src="/2024/07/22/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/butterfly04.png"><br>当然这只是最基本的butterfly 主题的呈现效果，butterfly 主题还有更多的配置，支持各种自定义，具体可以参考<a href="https://butterfly.js.org/posts/21cfbf15/">butterfly官方文档</a>。</p>
<h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>当以上所有工作都完成后，执行<code>hexo generate</code>命令， hexo 会帮我们生成静态文件，通常情况下我们要做的就是把静态文件部署到自己的服务器上。</p>
<h2 id="github-pages"><a href="#github-pages" class="headerlink" title="github pages"></a>github pages</h2><p>github pages 是 github 提供的静态文件托管服务，我们只需要把静态文件上传到 github 仓库中，然后就可以通过 github pages 访问。</p>
<h3 id="创建github-pages站点"><a href="#创建github-pages站点" class="headerlink" title="创建github pages站点"></a>创建github pages站点</h3><p>page 站点的创建方式和普通仓库的创建方式基本上一样，只不过仓库名称是固定的为:<code>你的github用户名.github.io</code></p>
<blockquote>
<p>注意:</p>
<ul>
<li>如果你的用户名称包含大写字母，在创建 page 站点仓库时必须改成小写字母。</li>
<li>page 仓库的可见性设置为 public，不然你或者其他人无法通过 github pages 访问你的博客。</li>
</ul>
</blockquote>
<h2 id="安装hexo-deployer-git-插件"><a href="#安装hexo-deployer-git-插件" class="headerlink" title="安装hexo-deployer-git 插件"></a>安装hexo-deployer-git 插件</h2><p>hexo-deployer-git 插件可以让 hexo 实现一键部署至github pages<br>在博客文件夹中打开 cmd 输入:</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>安装完成后，在博客根目录下的 _config.yml 文件中添加如下配置:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">&lt;repository</span> <span class="string">url&gt;</span> <span class="comment"># 你的page站点地址</span></span><br><span class="line">  <span class="attr">branch:</span> [<span class="string">branch</span>] <span class="comment"># 将代码上传到的分支，一般为main</span></span><br><span class="line">  <span class="attr">message:</span> [<span class="string">message</span>] <span class="comment"># 部署时生成的commit信息</span></span><br></pre></td></tr></table></figure>
<p>一切完成后便可以执行<code>hexo deploy</code>命令来一键部署自己的博客到github pages，别人只需要访问你的站点地址即可访问你的博客。<br>这样我们就完成了博客搭建的所有工作，虽然当前的博客有些简陋，我们可以通过相关主题的官方文档来进行自定义美化。<br>如果觉得这个教程对大家有所帮助，欢迎点赞、收藏、关注我的博客。</p>
]]></content>
  </entry>
</search>
